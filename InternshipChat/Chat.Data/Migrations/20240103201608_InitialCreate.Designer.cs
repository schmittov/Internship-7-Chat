// <auto-generated />
using System;
using Chat.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Chat.Data.Migrations
{
    [DbContext(typeof(InternshipChatDbContext))]
    [Migration("20240103201608_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Chat.Data.Entities.Models.GroupChat", b =>
                {
                    b.Property<int>("GroupChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupChatId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GroupChatId");

                    b.ToTable("GroupChats");

                    b.HasData(
                        new
                        {
                            GroupChatId = 1,
                            Name = "Developers"
                        },
                        new
                        {
                            GroupChatId = 2,
                            Name = "Marketing"
                        },
                        new
                        {
                            GroupChatId = 3,
                            Name = "Multimedia"
                        },
                        new
                        {
                            GroupChatId = 4,
                            Name = "Designers"
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.GroupMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupChatId")
                        .HasColumnType("integer");

                    b.Property<int>("IdSender")
                        .HasColumnType("integer");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupChatId");

                    b.ToTable("GroupMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupChatId = 1,
                            IdSender = 1,
                            MessageContent = "Kada je rok za domaći?",
                            SentAt = new DateTimeOffset(new DateTime(2024, 1, 3, 21, 16, 7, 865, DateTimeKind.Unspecified).AddTicks(7057), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            GroupChatId = 1,
                            IdSender = 2,
                            MessageContent = "4. siječnja",
                            SentAt = new DateTimeOffset(new DateTime(2024, 1, 3, 21, 16, 7, 865, DateTimeKind.Unspecified).AddTicks(7063), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            GroupChatId = 1,
                            IdSender = 2,
                            MessageContent = "2024",
                            SentAt = new DateTimeOffset(new DateTime(2024, 1, 3, 21, 16, 7, 865, DateTimeKind.Unspecified).AddTicks(7067), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            GroupChatId = 1,
                            IdSender = 3,
                            MessageContent = "Odlično!",
                            SentAt = new DateTimeOffset(new DateTime(2024, 1, 3, 21, 16, 7, 865, DateTimeKind.Unspecified).AddTicks(7070), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.PrivateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdReciver")
                        .HasColumnType("integer");

                    b.Property<int>("IdSender")
                        .HasColumnType("integer");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdSender");

                    b.ToTable("PrivateMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdReciver = 2,
                            IdSender = 1,
                            MessageContent = "Hej, Sretan Božić!",
                            SentAt = new DateTimeOffset(new DateTime(2024, 1, 3, 21, 16, 7, 865, DateTimeKind.Unspecified).AddTicks(6982), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            IdReciver = 1,
                            IdSender = 2,
                            MessageContent = "Hvala, također!",
                            SentAt = new DateTimeOffset(new DateTime(2024, 1, 3, 21, 16, 7, 865, DateTimeKind.Unspecified).AddTicks(7034), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            IdReciver = 3,
                            IdSender = 2,
                            MessageContent = "Možeš li mi pomoć sutra?",
                            SentAt = new DateTimeOffset(new DateTime(2024, 1, 3, 21, 16, 7, 865, DateTimeKind.Unspecified).AddTicks(7037), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            IdReciver = 2,
                            IdSender = 3,
                            MessageContent = "Moogu oko 3 popodne.",
                            SentAt = new DateTimeOffset(new DateTime(2024, 1, 3, 21, 16, 7, 865, DateTimeKind.Unspecified).AddTicks(7042), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mariomitov@gmail.com",
                            IsAdmin = true,
                            Name = "Mario",
                            Password = "12345678",
                            Surname = "Mitov"
                        },
                        new
                        {
                            Id = 2,
                            Email = "johndoe@gmail.com",
                            IsAdmin = false,
                            Name = "John",
                            Password = "12345678",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            Email = "janesmith@gmail.com",
                            IsAdmin = false,
                            Name = "Jane",
                            Password = "12345678",
                            Surname = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            Email = "peterjones@gmail.com",
                            IsAdmin = false,
                            Name = "Peter",
                            Password = "12345678",
                            Surname = "Jones"
                        },
                        new
                        {
                            Id = 5,
                            Email = "elizabethwilliams@gmail.com",
                            IsAdmin = false,
                            Name = "Elizabeth",
                            Password = "12345678",
                            Surname = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            Email = "michaelbrown@gmail.com",
                            IsAdmin = false,
                            Name = "Michael",
                            Password = "12345678",
                            Surname = "Brown"
                        },
                        new
                        {
                            Id = 7,
                            Email = "susananderson@gmail.com",
                            IsAdmin = false,
                            Name = "Susan",
                            Password = "12345678",
                            Surname = "Anderson"
                        },
                        new
                        {
                            Id = 8,
                            Email = "davidtaylor@gmail.com",
                            IsAdmin = false,
                            Name = "David",
                            Password = "12345678",
                            Surname = "Taylor"
                        },
                        new
                        {
                            Id = 9,
                            Email = "emilywilson@gmail.com",
                            IsAdmin = false,
                            Name = "Emily",
                            Password = "12345678",
                            Surname = "Wilson"
                        },
                        new
                        {
                            Id = 10,
                            Email = "charlesgarcia@gmail.com",
                            IsAdmin = false,
                            Name = "Charles",
                            Password = "12345678",
                            Surname = "Garcia"
                        },
                        new
                        {
                            Id = 11,
                            Email = "margaretrobinson@gmail.com",
                            IsAdmin = false,
                            Name = "Margaret",
                            Password = "12345678",
                            Surname = "Robinson"
                        },
                        new
                        {
                            Id = 12,
                            Email = "robertmartinez@gmail.com",
                            IsAdmin = false,
                            Name = "Robert",
                            Password = "12345678",
                            Surname = "Martinez"
                        },
                        new
                        {
                            Id = 13,
                            Email = "jenniferthompson@gmail.com",
                            IsAdmin = false,
                            Name = "Jennifer",
                            Password = "12345678",
                            Surname = "Thompson"
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupChatId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "GroupChatId");

                    b.HasIndex("GroupChatId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            GroupChatId = 1
                        },
                        new
                        {
                            UserId = 2,
                            GroupChatId = 1
                        },
                        new
                        {
                            UserId = 3,
                            GroupChatId = 1
                        },
                        new
                        {
                            UserId = 4,
                            GroupChatId = 1
                        },
                        new
                        {
                            UserId = 5,
                            GroupChatId = 1
                        },
                        new
                        {
                            UserId = 5,
                            GroupChatId = 2
                        },
                        new
                        {
                            UserId = 6,
                            GroupChatId = 2
                        },
                        new
                        {
                            UserId = 7,
                            GroupChatId = 2
                        },
                        new
                        {
                            UserId = 8,
                            GroupChatId = 3
                        },
                        new
                        {
                            UserId = 9,
                            GroupChatId = 3
                        },
                        new
                        {
                            UserId = 9,
                            GroupChatId = 4
                        },
                        new
                        {
                            UserId = 10,
                            GroupChatId = 4
                        },
                        new
                        {
                            UserId = 11,
                            GroupChatId = 4
                        },
                        new
                        {
                            UserId = 12,
                            GroupChatId = 4
                        },
                        new
                        {
                            UserId = 13,
                            GroupChatId = 4
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.GroupMessage", b =>
                {
                    b.HasOne("Chat.Data.Entities.Models.GroupChat", "GroupChat")
                        .WithMany("GroupMessages")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.PrivateMessage", b =>
                {
                    b.HasOne("Chat.Data.Entities.Models.User", "User")
                        .WithMany("PrivateMessages")
                        .HasForeignKey("IdSender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.UserGroup", b =>
                {
                    b.HasOne("Chat.Data.Entities.Models.GroupChat", "GroupChat")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Data.Entities.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.GroupChat", b =>
                {
                    b.Navigation("GroupMessages");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.User", b =>
                {
                    b.Navigation("PrivateMessages");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
